# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A28nDw5jN0S5VptaltbHZ4WUwc4ovccR
"""

import kagglehub
import os

# Download latest version
path = kagglehub.dataset_download("vivek468/superstore-dataset-final")

print("Path to dataset files:", path)
print("Contents of the directory:", os.listdir(path))

import pandas as pd

file_path = '/kaggle/input/superstore-dataset-final/Sample - Superstore.csv'
df = pd.read_csv(file_path, encoding='ISO-8859-1')

# Display 5 random rows of data
print(df.sample(5))

# Set display option to show all columns
pd.set_option('display.max_columns', None)

# Convert the date column to datetime format
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Ship Date']= pd.to_datetime(df['Ship Date'])
# Display information about the data
print("Info about the data:")
print(df.info())

#Calculate total sales by product
sales_by_product = df.groupby('Product Name')['Sales'].sum().sort_values(ascending=False)
print("Total sales by product:")
print(sales_by_product)

#The average discount for each product category.
discount_by_category=df.groupby('Category')['Discount'].mean()
print("The average discount for each product category:")
print(discount_by_category)

#Top 5 customers in terms of total purchases
top_5_customers=df.groupby('Customer Name')['Sales'].sum()[:5]
print("Top 5 customers in terms of total purchases:")
print(top_5_customers)

# The number of orders that made a loss
loss_orders = df[df['Profit'] < 0].shape[0]
print("The number of orders that made a loss:")
print(loss_orders)

# Profit Margin for each product.
profit_margin = (df.groupby('Product Name')['Profit'].sum() /
                df.groupby('Product Name')['Sales'].sum())
print("Profit Margin for each product:")
print(profit_margin)

# The relationship between discount and profit
discount_profit_relation = df.groupby('Discount')['Profit'].mean().reset_index()

print("The relationship between discount and average profit:")
print(discount_profit_relation)

#Visualization
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.scatter(discount_profit_relation['Discount'], discount_profit_relation['Profit'])
plt.title('Relationship between discount rate and average profit')
plt.xlabel('Discount Rate')
plt.ylabel('Average Profit')
plt.grid(True)
plt.show()

# The month or season with the highest sales.
df['Month']=df['Order Date'].dt.month
sales_by_mont=df.groupby('Month')['Sales'].sum().sort_values(ascending=False)[:1]
print("The month with the highest sales:")
print(sales_by_mont)
monthly_sales = df.groupby('Month')['Sales'].sum()

monthly_sales.plot(kind='bar')

# The average shipping time for each method
df['Shipping Time'] = (df['Ship Date'] - df['Order Date']).dt.days
avg_shipping_time = df.groupby('Ship Mode')['Shipping Time'].mean()

print("The average shipping time for each method:")
print(avg_shipping_time)

# Best-selling Category.
best_selling_category=df.groupby('Category')["Sales"].sum().sort_values(ascending=False)[:1]
print("Best-selling Category:")
print(best_selling_category)

# Top 5 most profitable products
top_5_profitable_products=df.groupby('Product Name')['Profit'].sum().sort_values(ascending=False)[:5]
print("Top 5 most profitable products:")
print(top_5_profitable_products)

#The relationship between the amount of product sold (Quantity) and profit.
quantity_profit = df.groupby('Quantity')['Profit'].mean().reset_index()
print("The relationship between the amount of product sold (Quantity) and profit:")
print(quantity_profit)
quantity_profit = df.groupby('Quantity')['Profit'].mean()
quantity_profit.plot(kind='line')
plt.show()

import matplotlib.pyplot as plt
sales_by_ship_mode=df.groupby('Ship Mode')['Sales'].sum()
sales_by_ship_mode.plot(kind='line', color='blue', marker='o')
plt.title('Sales by Ship Mode')
plt.xlabel('Ship Mode')
plt.ylabel('Sales ($)')
plt.grid(True)
plt.savefig('sales_by_ship_mode.png')
plt.show()

Quantity_by_region=df.groupby('Region')['Quantity'].sum()
Quantity_by_region.plot(kind='pie', autopct='%1.1f%%')
plt.title('Quantity by Region')
plt.xlabel('Region')
plt.ylabel('Quantity')

# profit distribution in dollars
plt.figure(figsize=(10, 6))
plt.hist(df['Profit'], bins=50, color='yellow', edgecolor='black')
plt.title('Profit Distribution')
plt.xlabel('Profit Value')
plt.ylabel('Number of orders')
plt.xlim(-1000, 1000)
plt.ylim(0,8000)
plt.grid(True)
plt.show()

# Calculate total sales by region
sales_by_region = df.groupby('Region')['Sales'].sum()
print("Total sales by region:")
print(sales_by_region)

# Create a pie chart to visualize sales distribution by region
import matplotlib.pyplot as plt

plt.figure(figsize=(6, 6))
sales_by_region.plot(kind='pie', autopct='%1.1f%%', colors=['lightgreen', 'lightcoral'])
plt.title('Percentage of Sales by Region')
plt.ylabel('')  # Remove Y-axis label
plt.savefig('sales_by_region.png')  # Save the chart
plt.show()

# Analyze total sales by month
df['Month'] = df['Order Date'].dt.to_period('M')
sales_by_month = df.groupby('Month')['Sales'].sum()
print("Total sales by month:")
print(sales_by_month)

# Analyze sales by month
df['Month'] = df['Order Date'].dt.to_period('M')
sales_by_month = df.groupby('Month')['Sales'].sum()
print("Total sales by month:")
print(sales_by_month)

# line graph of sales trend by month
plt.figure(figsize=(8, 5))
sales_by_month.plot(kind='line', marker='o', color='purple')
plt.title('Sales Trend by Month')
plt.xlabel('month')
plt.ylabel('Sales ($)')
plt.grid(True)
plt.tight_layout()
plt.savefig('sales_by_month.png') # save chart
plt.show()

sales_by_product.to_csv('sales_by_product.csv')
sales_by_region.to_csv('sales_by_region.csv')
sales_by_month.to_csv('sales_by_month.csv')